steps:
- template: WindowsAppSDK-PopulateBuildDateAndRevision-Steps.yml

# The environment variable VCToolsInstallDir isn't defined on lab machines, so we need to retrieve it ourselves.
- script: |
    "%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe" -Latest -requires Microsoft.Component.MSBuild -property InstallationPath > %TEMP%\vsinstalldir.txt
    set /p _VSINSTALLDIR15=<%TEMP%\vsinstalldir.txt
    del %TEMP%\vsinstalldir.txt
    call "%_VSINSTALLDIR15%\Common7\Tools\VsDevCmd.bat"
    echo VCToolsInstallDir = %VCToolsInstallDir%
    echo ##vso[task.setvariable variable=VCToolsInstallDir]%VCToolsInstallDir%
  displayName: 'Retrieve VC tools directory'

- task: CmdLine@1
  displayName: 'Display build machine environment variables'
  inputs:
    filename: 'set'

- task: NuGetAuthenticate@0
  inputs:
    nuGetServiceConnections: 'WindowsES'

- template: WindowsAppSDK-InstallWindowsSDK-Steps.yml

- task: powershell@2
  displayName: 'DevCheck: Setup/Verify development environment'
  inputs:
    targetType: filePath
    filePath: DevCheck.ps1
    arguments: -NoInteractive -Offline -Verbose -CertPassword 'BuildPipeline' -CheckTestPfx -Clean -CheckDependencies
    workingDirectory: '$(Build.SourcesDirectory)'

- task: PowerShell@2
  displayName: GenerateVersionInfo
  inputs:
    filePath: '$(Build.SourcesDirectory)\eng\common\VersionInfo\GenerateVersionInfo.ps1'
    arguments: >
      -ProductMajor "$(major)"
      -ProductMinor "$(minor)"

- task: PowerShell@2
  displayName: 'Download dotnet installer'
  condition: or(eq(variables['buildPlatform'], 'x86'), eq(variables['buildPlatform'], 'x64'), eq(variables['buildPlatform'], 'arm64'))
  inputs:
    targetType: filePath
    filePath: '$(Build.SourcesDirectory)\build\scripts\DownloadDotNetRuntimeInstaller.ps1'
    arguments: -Platform "$(buildPlatform)" -OutputDirectory "$(build.SourcesDirectory)\packages"

- task: PowerShell@2
  displayName: 'Download vcredist installer'
  condition: or(eq(variables['buildPlatform'], 'x86'), eq(variables['buildPlatform'], 'x64'), eq(variables['buildPlatform'], 'arm64'))
  inputs:
    targetType: filePath
    filePath: '$(Build.SourcesDirectory)\build\scripts\DownloadVCRedistInstaller.ps1'
    arguments: -Platform "$(buildPlatform)" -OutputDirectory "$(build.SourcesDirectory)\packages"

- task: PowerShell@2
  displayName: 'Download desktop bridge CRT'
  condition: or(eq(variables['buildPlatform'], 'x86'), eq(variables['buildPlatform'], 'x64'), eq(variables['buildPlatform'], 'arm64'))
  inputs:
    targetType: filePath
    filePath: '$(Build.SourcesDirectory)\build\scripts\DownloadVCLibsDesktop.ps1'
    arguments: -Platform "$(buildPlatform)" -OutputDirectory "$(build.SourcesDirectory)\packages"

- task: powershell@2
  displayName: 'Create DynamicDependencies TerminalVelocity features'
  inputs:
    targetType: filePath
    filePath: tools\TerminalVelocity\Generate-TerminalVelocityFeatures.ps1
    arguments: -Path $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-DynamicDependency.xml -Channel $(channel) -Language C++ -Namespace Microsoft.Windows.ApplicationModel.DynamicDependency -Output $(Build.SourcesDirectory)\dev\common\MddTerminalVelocityFeatures.h
    workingDirectory: '$(Build.SourcesDirectory)'

- task: powershell@2
  displayName: 'Create DeploymentAPI TerminalVelocity features'
  inputs:
    targetType: filePath
    filePath: tools\TerminalVelocity\Generate-TerminalVelocityFeatures.ps1
    arguments: -Path $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-DeploymentAPI.xml -Channel $(channel) -Language C++ -Namespace Microsoft.Windows.ApplicationModel.WindowsAppRuntime -Output $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-DeploymentAPI.h
    workingDirectory: '$(Build.SourcesDirectory)'

- task: powershell@2
  displayName: 'Create AppNotifications TerminalVelocity features'
  inputs:
    targetType: filePath
    filePath: tools\TerminalVelocity\Generate-TerminalVelocityFeatures.ps1
    arguments: -Path $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-AppNotifications.xml -Channel $(channel) -Language C++ -Namespace Microsoft.Windows.AppNotifications -Output $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-AppNotifications.h
    workingDirectory: '$(Build.SourcesDirectory)'

- task: powershell@2
  displayName: 'Create VersionInfo TerminalVelocity features'
  inputs:
    targetType: filePath
    filePath: tools\TerminalVelocity\Generate-TerminalVelocityFeatures.ps1
    arguments: -Path $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-VersionInfo.xml -Channel $(channel) -Language C++ -Namespace Microsoft.Windows.ApplicationModel.WindowsAppRuntime -Output $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-VersionInfo.h
    workingDirectory: '$(Build.SourcesDirectory)'

- task: powershell@2
  displayName: 'Create PushNotifications TerminalVelocity features'
  inputs:
    targetType: filePath
    filePath: tools\TerminalVelocity\Generate-TerminalVelocityFeatures.ps1
    arguments: -Path $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-PushNotifications.xml -Channel $(channel) -Language C++ -Namespace Microsoft.Windows.PushNotifications -Output $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-PushNotifications.h
    workingDirectory: '$(Build.SourcesDirectory)'

- task: powershell@2
  displayName: 'Create EnvironmentManager TerminalVelocity features'
  inputs:
    targetType: filePath
    filePath: tools\TerminalVelocity\Generate-TerminalVelocityFeatures.ps1
    arguments: -Path $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-EnvironmentManager.xml -Channel $(channel) -Language C++ -Namespace Microsoft.Windows.System -Output $(Build.SourcesDirectory)\dev\common\TerminalVelocityFeatures-EnvironmentManager.h
    workingDirectory: '$(Build.SourcesDirectory)'

- task: powershell@2
  name: UpdateTraceloggingConfig
  inputs:
    targetType: 'inline'
    script: |
      $srcPath = Get-Childitem -Path 'dev\WindowsAppRuntime_Insights\packages' -File 'MicrosoftTelemetry.h' -Recurse

      if (($srcPath -ne $null)){
        $destinationPaths = Get-Childitem -Path 'packages' -File 'Traceloggingconfig.h' -Recurse

        if (($destinationPaths -ne $null)) {
          foreach ($destPath in $destinationPaths) {
            Write-Host 'SourcePath:' $srcPath.FullName
            Write-Host 'DestinationPath:' $destPath.FullName
            Copy-Item -Force $srcPath.FullName $destPath.FullName
          }
        }
      }
